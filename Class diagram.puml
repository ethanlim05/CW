@startuml
'https://plantuml.com/class-diagram

' Model Classes
class Account {
  - String userName
  - long score
  - static List<Account> accounts
  - static Account singleInstance
  + Account(String userName)
  + static Account getInstance()
  + static Account getInstance(String username)
  + static boolean usernameExists(String username)
  + int compareTo(Account o)
  + void addToScore(long score)
  + long getScore()
  + String getUserName()
  + static List<Account> getAllAccounts()
  + void setUsername(String newUsername)
  + static void saveScores()
  + static void loadScores()
}

class GameModel {
  - long score
  - int[][] board
  - boolean gameOver
  + GameModel()
  + void startNewGame()
  + boolean moveLeft()
  + boolean moveRight()
  + boolean moveUp()
  + boolean moveDown()
  + int[][] getBoard()
  + long getScore()
  + boolean isGameOver()
  + void addScore(long points)
  + boolean hasWon()
  + boolean hasMovesLeft()
  + void addRandomTile()
}

' View Classes
class AnimatedTile {
  - Rectangle rectangle
  - Text text
  - int number
  - double size
  + AnimatedTile(double size)
  + void setNumber(int number)
  + int getNumber()
  + void animateNewTile()
  + void resize(double size)
}

class AccountView {
  - Group root
  - SceneManager sceneManager
  - Account account
  + AccountView(SceneManager sceneManager, Account account)
  + Group getRoot()
}

class Cell {
  - Rectangle rectangle
  - Text text
  - int number
  + Cell(double x, double y, double size, Pane root)
  + void setNumber(int number)
  + double getX()
  + double getY()
  + void clear()
}

class GameView {
  - static final int GRID_SIZE
  - static final int CELL_SIZE
  - static final int CELL_SPACING
  - Pane[][] cells
  - AnimatedTile[][] tiles
  - long score
  - GameModel gameModel
  - Label scoreLabel
  - Button backButton
  - SceneManager sceneManager
  - boolean isAnimating
  - Pane gridContainer
  - double originalWidth
  - double originalHeight
  - double originalCellSize
  - double originalCellSpacing
  + GameView(SceneManager sceneManager)
  + void updateBoard()
  + void updateScoreDisplay()
  + void moveUp()
  + void moveDown()
  + void moveLeft()
  + void moveRight()
  + void addRandomTile()
  + void checkGameStatus()
  + void showGameOverScreen(String message)
  + void adjustToFullscreen(double screenWidth, double screenHeight)
  + void resetToOriginalSize()
}

class LeaderboardView {
  - Group root
  - SceneManager sceneManager
  + LeaderboardView(SceneManager sceneManager)
  + Group getRoot()
}

' Controller Classes
class Controller {
  - GameModel gameModel
  - GameView gameView
  - Scene scene
  + Controller(GameModel model, GameView view)
  + void setScene(Scene scene)
}

class SceneManager {
  + void showMainMenu()
  + void showGame()
  + void showAccount()
  + void showLeaderboard()
}

' Main Class
class Main {
  + static double getWindowWidth()
  + static double getWindowHeight()
  + void start(Stage primaryStage)
}

' Relationships
AccountView --> Account
AccountView --> SceneManager

GameView --> GameModel
GameView --> Account
GameView --> SceneManager
GameView --> Main
GameView *-- AnimatedTile
GameView *-- Cell

Controller --> GameModel
Controller --> GameView

LeaderboardView --> Account
LeaderboardView --> SceneManager

' Account has a static list of Account objects
Account "1" *-- "many" Account : accounts

' GameModel has a 2D array of integers for the board
GameModel "1" *-- "16" int : board

' GameView has a 2D array of AnimatedTile objects
GameView "1" *-- "16" AnimatedTile : tiles

' GameView has a 2D array of Cell objects
GameView "1" *-- "16" Cell : cells

@enduml